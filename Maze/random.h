#ifndef __RANDOM_H
#include <math.h>
/* Random
 *
 * This is a Psuedo-random number generator. Use it to define sets of random numbers.
 * Use globalRandom if repetition is not required
 *
 * WARNING: Do not use the standard c rand() functions in conjunction with this class. 
 * RandomGenerator may reset rand(), causing a repeating set to be generated by rand, which may not be
 * desirable.
 * It is also recomended that the reset and method in globalRandom is not used since globalRandom's intended purpose
 * is for generating non-repeatable random sets.
 *
 * TODO: A neat sub-class of (or extension to) this class could be a random generator which takes 2 additional generate arguments:
 *       a number with a likelyhood %. All generated numbers would then tend towards this number using an algorithm
 *       that insures that the likelyhood % of numbers would be this number (for integers - something similar could be 
 *       done for for floats as well, by providing a range instead of a number). This would be very 
 *       usefull for example for making a plain wall texture more common than the other more exotic wall textures
 *       Many other things can also be done, such as having possibility arrays etc.
 */
class Random
{
protected:
  int seed;
  int num; //this is the last generated number
public:
  /* constructor 
   */
  Random(int seed);
  
  /* constructor 
   * 
   * Automatically generates a seed, using the system time
   */
  Random();

  /* reset
   *
   * resets the random number generator to the last set seed, so that the random set can be duplicated
   */ 
  void reset();

  /* generate
   *
   * generates & returns the next random number in the set
   * generate(); generates a number from 0 to RAND_MAX
   */
  float generate(float min, float max);  
  int generate(int min, int max);
  int generate();

  /* get
   *
   * returns the last generated number
   */
  int get() const {return num;}

  /* setSeed
   */
  void setSeed(int seed);

  /* setResetPoint
   *
   * Captures the last generated random number and sets it as the new seed so that the random 
   * generator can be reset to this point
   */
  void setResetPoint();
}; 
extern Random globalRandom;
#endif

